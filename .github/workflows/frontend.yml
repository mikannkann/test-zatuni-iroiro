# 本番用のメモ
# CIワークフローをpackage.jsonのscriptsに「完全に合わせる」と、prettierやlintが自動修正（--write, --fix）になり、CIとしては不適切になる場合があります。
# 一般的にCIでは「--check」や「--max-warnings=0」など、チェック専用のコマンドを使うのが推奨です。
#
# ベストプラクティス：
# package.jsonにCI用のscript（例：format:check, lint:ci）を追加し、ワークフローではそれを使う
# "scripts": {
#   "format": "prettier --write src/",
#   "format:check": "prettier --check src/",
#   "lint": "eslint . --fix",
#   "lint:ci": "eslint . --max-warnings=0"
# }
# ワークフローでは npm run format:check や npm run lint:ci を使う

name: frontend CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
    paths:
      - "frontend/**"
      - ".github/workflows/frontend.yml"
  pull_request:
    paths:
      - "frontend/**"
      - ".github/workflows/frontend.yml"

jobs:
  frontend-lint-and-build:
    name: Lint and Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install Dependencies
        run: npm ci

      - name: Run Format Check
        run: npm run format:check

      - name: Run Lint Check
        run: npm run lint:ci

      - name: Run Build
        run: npm run build
